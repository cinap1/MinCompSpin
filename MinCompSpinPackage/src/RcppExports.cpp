// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Read_BasisOp_BinaryRepresentation
std::list<uint32_t> Read_BasisOp_BinaryRepresentation(std::string Basis_binary_filename, unsigned int n);
RcppExport SEXP _MinCompSpinPackage_Read_BasisOp_BinaryRepresentation(SEXP Basis_binary_filenameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type Basis_binary_filename(Basis_binary_filenameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Read_BasisOp_BinaryRepresentation(Basis_binary_filename, n));
    return rcpp_result_gen;
END_RCPP
}
// Read_BasisOp_IntegerRepresentation
std::list<uint32_t> Read_BasisOp_IntegerRepresentation(std::string Basis_integer_filename);
RcppExport SEXP _MinCompSpinPackage_Read_BasisOp_IntegerRepresentation(SEXP Basis_integer_filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type Basis_integer_filename(Basis_integer_filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(Read_BasisOp_IntegerRepresentation(Basis_integer_filename));
    return rcpp_result_gen;
END_RCPP
}
// Original_Basis
std::list<uint32_t> Original_Basis(unsigned int n);
RcppExport SEXP _MinCompSpinPackage_Original_Basis(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Original_Basis(n));
    return rcpp_result_gen;
END_RCPP
}
// PrintTerm_Basis
void PrintTerm_Basis(std::list<uint32_t> Basis_li, unsigned int n);
RcppExport SEXP _MinCompSpinPackage_PrintTerm_Basis(SEXP Basis_liSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< std::list<uint32_t> >::type Basis_li(Basis_liSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    PrintTerm_Basis(Basis_li, n);
    return R_NilValue;
END_RCPP
}
// MCM_GivenRank_r
std::vector<std::vector<uint32_t>> MCM_GivenRank_r(std::vector<std::vector<int>> Kset, unsigned int N, Rcpp::NumericVector LogE_best, unsigned int r, unsigned int n, std::string OUTPUT_directory, bool print_bool);
RcppExport SEXP _MinCompSpinPackage_MCM_GivenRank_r(SEXP KsetSEXP, SEXP NSEXP, SEXP LogE_bestSEXP, SEXP rSEXP, SEXP nSEXP, SEXP OUTPUT_directorySEXP, SEXP print_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type LogE_best(LogE_bestSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type OUTPUT_directory(OUTPUT_directorySEXP);
    Rcpp::traits::input_parameter< bool >::type print_bool(print_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(MCM_GivenRank_r(Kset, N, LogE_best, r, n, OUTPUT_directory, print_bool));
    return rcpp_result_gen;
END_RCPP
}
// MCM_AllRank_SmallerThan_r_Ordered
std::vector<std::vector<uint32_t>> MCM_AllRank_SmallerThan_r_Ordered(std::vector<std::vector<int>> Kset, unsigned int N, Rcpp::NumericVector LogE_best, unsigned int r, unsigned int n, std::string OUTPUT_directory, bool print_bool);
RcppExport SEXP _MinCompSpinPackage_MCM_AllRank_SmallerThan_r_Ordered(SEXP KsetSEXP, SEXP NSEXP, SEXP LogE_bestSEXP, SEXP rSEXP, SEXP nSEXP, SEXP OUTPUT_directorySEXP, SEXP print_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type LogE_best(LogE_bestSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type OUTPUT_directory(OUTPUT_directorySEXP);
    Rcpp::traits::input_parameter< bool >::type print_bool(print_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(MCM_AllRank_SmallerThan_r_Ordered(Kset, N, LogE_best, r, n, OUTPUT_directory, print_bool));
    return rcpp_result_gen;
END_RCPP
}
// MCM_AllRank_SmallerThan_r_nonOrdered
std::vector<std::vector<uint32_t>> MCM_AllRank_SmallerThan_r_nonOrdered(std::vector<std::vector<int>> Kset, unsigned int N, Rcpp::NumericVector LogE_best, unsigned int r, unsigned int n, std::string OUTPUT_directory, bool print_bool);
RcppExport SEXP _MinCompSpinPackage_MCM_AllRank_SmallerThan_r_nonOrdered(SEXP KsetSEXP, SEXP NSEXP, SEXP LogE_bestSEXP, SEXP rSEXP, SEXP nSEXP, SEXP OUTPUT_directorySEXP, SEXP print_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type LogE_best(LogE_bestSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type OUTPUT_directory(OUTPUT_directorySEXP);
    Rcpp::traits::input_parameter< bool >::type print_bool(print_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(MCM_AllRank_SmallerThan_r_nonOrdered(Kset, N, LogE_best, r, n, OUTPUT_directory, print_bool));
    return rcpp_result_gen;
END_RCPP
}
// GeomComplexity_SubCM
double GeomComplexity_SubCM(unsigned int m);
RcppExport SEXP _MinCompSpinPackage_GeomComplexity_SubCM(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(GeomComplexity_SubCM(m));
    return rcpp_result_gen;
END_RCPP
}
// ParamComplexity_SubCM
double ParamComplexity_SubCM(unsigned int m, unsigned int N);
RcppExport SEXP _MinCompSpinPackage_ParamComplexity_SubCM(SEXP mSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(ParamComplexity_SubCM(m, N));
    return rcpp_result_gen;
END_RCPP
}
// Complexity_MCM
double Complexity_MCM(std::vector<std::vector<uint32_t>> Partition, unsigned int N, unsigned int n, Rcpp::NumericVector C_param, Rcpp::NumericVector C_geom);
RcppExport SEXP _MinCompSpinPackage_Complexity_MCM(SEXP PartitionSEXP, SEXP NSEXP, SEXP nSEXP, SEXP C_paramSEXP, SEXP C_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<uint32_t>> >::type Partition(PartitionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type C_param(C_paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type C_geom(C_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(Complexity_MCM(Partition, N, n, C_param, C_geom));
    return rcpp_result_gen;
END_RCPP
}
// read_datafile
std::vector<std::vector<int>> read_datafile(Rcpp::IntegerVector N, unsigned int n, std::string filename);
RcppExport SEXP _MinCompSpinPackage_read_datafile(SEXP NSEXP, SEXP nSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(read_datafile(N, n, filename));
    return rcpp_result_gen;
END_RCPP
}
// build_Kset
std::vector<std::vector<int>> build_Kset(std::vector<std::vector<int>> Nset, std::list<uint32_t> Basis, unsigned int n, bool print_bool);
RcppExport SEXP _MinCompSpinPackage_build_Kset(SEXP NsetSEXP, SEXP BasisSEXP, SEXP nSEXP, SEXP print_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Nset(NsetSEXP);
    Rcpp::traits::input_parameter< std::list<uint32_t> >::type Basis(BasisSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type print_bool(print_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(build_Kset(Nset, Basis, n, print_bool));
    return rcpp_result_gen;
END_RCPP
}
// LogE_SubCM
double LogE_SubCM(std::vector<std::vector<int>> Kset, uint32_t Ai, unsigned int N, unsigned int n, bool print_bool);
RcppExport SEXP _MinCompSpinPackage_LogE_SubCM(SEXP KsetSEXP, SEXP AiSEXP, SEXP NSEXP, SEXP nSEXP, SEXP print_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type Ai(AiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type print_bool(print_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(LogE_SubCM(Kset, Ai, N, n, print_bool));
    return rcpp_result_gen;
END_RCPP
}
// LogE_MCM
double LogE_MCM(std::vector<std::vector<int>> Kset, std::vector<std::vector<uint32_t>> Partition, unsigned int N, unsigned int n, bool print_bool);
RcppExport SEXP _MinCompSpinPackage_LogE_MCM(SEXP KsetSEXP, SEXP PartitionSEXP, SEXP NSEXP, SEXP nSEXP, SEXP print_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<uint32_t>> >::type Partition(PartitionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type print_bool(print_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(LogE_MCM(Kset, Partition, N, n, print_bool));
    return rcpp_result_gen;
END_RCPP
}
// LogL_CM
double LogL_CM(std::vector<std::vector<int>> Kset, unsigned int N);
RcppExport SEXP _MinCompSpinPackage_LogL_CM(SEXP KsetSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(LogL_CM(Kset, N));
    return rcpp_result_gen;
END_RCPP
}
// LogL_SubCM
double LogL_SubCM(std::vector<std::vector<int>> Kset, uint32_t Ai, unsigned int N, unsigned int n, bool print_bool);
RcppExport SEXP _MinCompSpinPackage_LogL_SubCM(SEXP KsetSEXP, SEXP AiSEXP, SEXP NSEXP, SEXP nSEXP, SEXP print_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type Ai(AiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type print_bool(print_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(LogL_SubCM(Kset, Ai, N, n, print_bool));
    return rcpp_result_gen;
END_RCPP
}
// LogL_MCM
double LogL_MCM(std::vector<std::vector<int>> Kset, std::vector<std::vector<uint32_t>> Partition, unsigned int N, unsigned int n, bool print_bool);
RcppExport SEXP _MinCompSpinPackage_LogL_MCM(SEXP KsetSEXP, SEXP PartitionSEXP, SEXP NSEXP, SEXP nSEXP, SEXP print_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<uint32_t>> >::type Partition(PartitionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type print_bool(print_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(LogL_MCM(Kset, Partition, N, n, print_bool));
    return rcpp_result_gen;
END_RCPP
}
// Create_MCM
std::vector<std::vector<uint32_t>> Create_MCM(std::list<uint32_t> MCM_table);
RcppExport SEXP _MinCompSpinPackage_Create_MCM(SEXP MCM_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::list<uint32_t> >::type MCM_table(MCM_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(Create_MCM(MCM_table));
    return rcpp_result_gen;
END_RCPP
}
// Read_MCMParts_BinaryRepresentation
std::vector<std::vector<uint32_t>> Read_MCMParts_BinaryRepresentation(std::string MCM_binary_filename, unsigned int n);
RcppExport SEXP _MinCompSpinPackage_Read_MCMParts_BinaryRepresentation(SEXP MCM_binary_filenameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type MCM_binary_filename(MCM_binary_filenameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Read_MCMParts_BinaryRepresentation(MCM_binary_filename, n));
    return rcpp_result_gen;
END_RCPP
}
// check_partition
bool check_partition(std::vector<std::vector<uint32_t>> Partition, unsigned int n);
RcppExport SEXP _MinCompSpinPackage_check_partition(SEXP PartitionSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<uint32_t>> >::type Partition(PartitionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(check_partition(Partition, n));
    return rcpp_result_gen;
END_RCPP
}
// PrintTerminal_MCM_Info
void PrintTerminal_MCM_Info(std::vector<std::vector<int>> Kset, unsigned int N, unsigned int n, std::vector<std::vector<uint32_t>> MCM_Partition);
RcppExport SEXP _MinCompSpinPackage_PrintTerminal_MCM_Info(SEXP KsetSEXP, SEXP NSEXP, SEXP nSEXP, SEXP MCM_PartitionSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<uint32_t>> >::type MCM_Partition(MCM_PartitionSEXP);
    PrintTerminal_MCM_Info(Kset, N, n, MCM_Partition);
    return R_NilValue;
END_RCPP
}
// PrintInfo_All_Indep_Models
void PrintInfo_All_Indep_Models(std::vector<std::vector<int>> Kset, unsigned int N, unsigned int n);
RcppExport SEXP _MinCompSpinPackage_PrintInfo_All_Indep_Models(SEXP KsetSEXP, SEXP NSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    PrintInfo_All_Indep_Models(Kset, N, n);
    return R_NilValue;
END_RCPP
}
// PrintInfo_All_SubComplete_Models
void PrintInfo_All_SubComplete_Models(std::vector<std::vector<int>> Kset, unsigned int N, unsigned int n);
RcppExport SEXP _MinCompSpinPackage_PrintInfo_All_SubComplete_Models(SEXP KsetSEXP, SEXP NSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type Kset(KsetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    PrintInfo_All_SubComplete_Models(Kset, N, n);
    return R_NilValue;
END_RCPP
}
// MCM_search
int MCM_search(unsigned int n, std::string datafilename, std::list<uint32_t> Basis_li, std::string OUTPUT_directory, bool comparison);
RcppExport SEXP _MinCompSpinPackage_MCM_search(SEXP nSEXP, SEXP datafilenameSEXP, SEXP Basis_liSEXP, SEXP OUTPUT_directorySEXP, SEXP comparisonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type datafilename(datafilenameSEXP);
    Rcpp::traits::input_parameter< std::list<uint32_t> >::type Basis_li(Basis_liSEXP);
    Rcpp::traits::input_parameter< std::string >::type OUTPUT_directory(OUTPUT_directorySEXP);
    Rcpp::traits::input_parameter< bool >::type comparison(comparisonSEXP);
    rcpp_result_gen = Rcpp::wrap(MCM_search(n, datafilename, Basis_li, OUTPUT_directory, comparison));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MinCompSpinPackage_Read_BasisOp_BinaryRepresentation", (DL_FUNC) &_MinCompSpinPackage_Read_BasisOp_BinaryRepresentation, 2},
    {"_MinCompSpinPackage_Read_BasisOp_IntegerRepresentation", (DL_FUNC) &_MinCompSpinPackage_Read_BasisOp_IntegerRepresentation, 1},
    {"_MinCompSpinPackage_Original_Basis", (DL_FUNC) &_MinCompSpinPackage_Original_Basis, 1},
    {"_MinCompSpinPackage_PrintTerm_Basis", (DL_FUNC) &_MinCompSpinPackage_PrintTerm_Basis, 2},
    {"_MinCompSpinPackage_MCM_GivenRank_r", (DL_FUNC) &_MinCompSpinPackage_MCM_GivenRank_r, 7},
    {"_MinCompSpinPackage_MCM_AllRank_SmallerThan_r_Ordered", (DL_FUNC) &_MinCompSpinPackage_MCM_AllRank_SmallerThan_r_Ordered, 7},
    {"_MinCompSpinPackage_MCM_AllRank_SmallerThan_r_nonOrdered", (DL_FUNC) &_MinCompSpinPackage_MCM_AllRank_SmallerThan_r_nonOrdered, 7},
    {"_MinCompSpinPackage_GeomComplexity_SubCM", (DL_FUNC) &_MinCompSpinPackage_GeomComplexity_SubCM, 1},
    {"_MinCompSpinPackage_ParamComplexity_SubCM", (DL_FUNC) &_MinCompSpinPackage_ParamComplexity_SubCM, 2},
    {"_MinCompSpinPackage_Complexity_MCM", (DL_FUNC) &_MinCompSpinPackage_Complexity_MCM, 5},
    {"_MinCompSpinPackage_read_datafile", (DL_FUNC) &_MinCompSpinPackage_read_datafile, 3},
    {"_MinCompSpinPackage_build_Kset", (DL_FUNC) &_MinCompSpinPackage_build_Kset, 4},
    {"_MinCompSpinPackage_LogE_SubCM", (DL_FUNC) &_MinCompSpinPackage_LogE_SubCM, 5},
    {"_MinCompSpinPackage_LogE_MCM", (DL_FUNC) &_MinCompSpinPackage_LogE_MCM, 5},
    {"_MinCompSpinPackage_LogL_CM", (DL_FUNC) &_MinCompSpinPackage_LogL_CM, 2},
    {"_MinCompSpinPackage_LogL_SubCM", (DL_FUNC) &_MinCompSpinPackage_LogL_SubCM, 5},
    {"_MinCompSpinPackage_LogL_MCM", (DL_FUNC) &_MinCompSpinPackage_LogL_MCM, 5},
    {"_MinCompSpinPackage_Create_MCM", (DL_FUNC) &_MinCompSpinPackage_Create_MCM, 1},
    {"_MinCompSpinPackage_Read_MCMParts_BinaryRepresentation", (DL_FUNC) &_MinCompSpinPackage_Read_MCMParts_BinaryRepresentation, 2},
    {"_MinCompSpinPackage_check_partition", (DL_FUNC) &_MinCompSpinPackage_check_partition, 2},
    {"_MinCompSpinPackage_PrintTerminal_MCM_Info", (DL_FUNC) &_MinCompSpinPackage_PrintTerminal_MCM_Info, 4},
    {"_MinCompSpinPackage_PrintInfo_All_Indep_Models", (DL_FUNC) &_MinCompSpinPackage_PrintInfo_All_Indep_Models, 3},
    {"_MinCompSpinPackage_PrintInfo_All_SubComplete_Models", (DL_FUNC) &_MinCompSpinPackage_PrintInfo_All_SubComplete_Models, 3},
    {"_MinCompSpinPackage_MCM_search", (DL_FUNC) &_MinCompSpinPackage_MCM_search, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MinCompSpinPackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
